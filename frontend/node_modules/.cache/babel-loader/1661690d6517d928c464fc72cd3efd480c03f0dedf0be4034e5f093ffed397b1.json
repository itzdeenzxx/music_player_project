{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'PageMusic',\n  data() {\n    return {\n      musicList: [],\n      selectedMusic: null,\n      loading: true,\n      error: null,\n      title: 'All Music'\n    };\n  },\n  async created() {\n    // If there's a search query parameter, use it to filter music\n    const searchQuery = this.$route.params.query;\n    if (searchQuery) {\n      this.title = `Search Results: \"${searchQuery}\"`;\n      await this.searchMusic(searchQuery);\n    } else {\n      await this.fetchAllMusic();\n    }\n  },\n  watch: {\n    '$route.params.query': {\n      handler: async function (newQuery) {\n        if (newQuery) {\n          this.title = `Search Results: \"${newQuery}\"`;\n          await this.searchMusic(newQuery);\n        } else {\n          this.title = 'All Music';\n          await this.fetchAllMusic();\n        }\n      }\n    }\n  },\n  methods: {\n    async fetchAllMusic() {\n      this.loading = true;\n      try {\n        const response = await axios.get('http://localhost:3000/musics');\n        this.musicList = response.data;\n      } catch (error) {\n        console.error('Error fetching music:', error);\n        this.error = 'Failed to load music. Please try again later.';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async searchMusic(query) {\n      this.loading = true;\n      try {\n        const response = await axios.get(`http://localhost:3000/musics/search/${query}`);\n        this.musicList = response.data;\n      } catch (error) {\n        console.error('Error searching music:', error);\n        this.error = 'Failed to search music. Please try again later.';\n      } finally {\n        this.loading = false;\n      }\n    },\n    playMusic(music) {\n      this.selectedMusic = music;\n      // Scroll to top where the player is\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth'\n      });\n    },\n    stopVideo() {\n      this.selectedMusic = null;\n    },\n    formatDuration(seconds) {\n      const minutes = Math.floor(seconds / 60);\n      const remainingSeconds = seconds % 60;\n      return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n    },\n    async addToFavorites(music) {\n      try {\n        await axios.post('http://localhost:3000/favorites/add', {\n          musicId: music.ms_id\n        });\n        alert('Added to favorites successfully!');\n      } catch (error) {\n        console.error('Error adding to favorites:', error);\n        alert('Failed to add to favorites. Please try again.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","musicList","selectedMusic","loading","error","title","created","searchQuery","$route","params","query","searchMusic","fetchAllMusic","watch","handler","newQuery","methods","response","get","console","playMusic","music","window","scrollTo","top","behavior","stopVideo","formatDuration","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","addToFavorites","post","musicId","ms_id","alert"],"sources":["/Users/addeen/Desktop/project/frontend/src/components/PageMusic.vue"],"sourcesContent":["<template>\r\n    <div class=\"container mt-4\">\r\n      <div class=\"row\">\r\n        <!-- Music Player Section -->\r\n        <div v-if=\"selectedMusic\" class=\"col-12 mb-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <div class=\"ratio ratio-16x9\">\r\n                <iframe \r\n                  :src=\"selectedMusic.ms_path\" \r\n                  title=\"YouTube video player\" \r\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                  allowfullscreen>\r\n                </iframe>\r\n              </div>\r\n              <div class=\"mt-3\">\r\n                <h4>{{ selectedMusic.ms_name }}</h4>\r\n                <p class=\"text-muted\">\r\n                  Album: {{ selectedMusic.ms_album }} • \r\n                  Type: {{ selectedMusic.ms_type }} • \r\n                  Duration: {{ formatDuration(selectedMusic.ms_duration) }}\r\n                </p>\r\n                <div class=\"btn-group\">\r\n                  <button @click=\"stopVideo\" class=\"btn btn-danger\">\r\n                    <i class=\"fas fa-stop\"></i> Stop\r\n                  </button>\r\n                  <button @click=\"addToFavorites(selectedMusic)\" class=\"btn btn-outline-primary\">\r\n                    <i class=\"fas fa-heart\"></i> Add to Favorites\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Music Grid -->\r\n        <div class=\"col-12\">\r\n          <h2 class=\"mb-4\">{{ title }}</h2>\r\n          \r\n          <div v-if=\"loading\" class=\"text-center py-5\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n          </div>\r\n  \r\n          <div v-else-if=\"error\" class=\"alert alert-warning\" role=\"alert\">\r\n            {{ error }}\r\n          </div>\r\n  \r\n          <div v-else-if=\"musicList.length === 0\" class=\"alert alert-info\" role=\"alert\">\r\n            ไม่สามารถพบเพลง\r\n          </div>\r\n  \r\n          <div v-else class=\"row row-cols-1 row-cols-md-3 g-4\">\r\n            <div v-for=\"music in musicList\" :key=\"music.ms_id\" class=\"col\">\r\n              <div class=\"card h-100 music-card\">\r\n                <div class=\"card-body\">\r\n                  <h5 class=\"card-title\">{{ music.ms_name }}</h5>\r\n                  <p class=\"card-text\">\r\n                    <small class=\"text-muted\">\r\n                      Album: {{ music.ms_album }}<br>\r\n                      Type: {{ music.ms_type }}<br>\r\n                      Duration: {{ formatDuration(music.ms_duration) }}\r\n                    </small>\r\n                  </p>\r\n                  <div class=\"d-grid gap-2\">\r\n                    <button \r\n                      @click=\"playMusic(music)\" \r\n                      class=\"btn btn-primary\"\r\n                    >\r\n                      <i class=\"fas fa-play\"></i> Play\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: 'PageMusic',\r\n    data() {\r\n      return {\r\n        musicList: [],\r\n        selectedMusic: null,\r\n        loading: true,\r\n        error: null,\r\n        title: 'All Music'\r\n      };\r\n    },\r\n    async created() {\r\n      // If there's a search query parameter, use it to filter music\r\n      const searchQuery = this.$route.params.query;\r\n      if (searchQuery) {\r\n        this.title = `Search Results: \"${searchQuery}\"`;\r\n        await this.searchMusic(searchQuery);\r\n      } else {\r\n        await this.fetchAllMusic();\r\n      }\r\n    },\r\n    watch: {\r\n      '$route.params.query': {\r\n        handler: async function(newQuery) {\r\n          if (newQuery) {\r\n            this.title = `Search Results: \"${newQuery}\"`;\r\n            await this.searchMusic(newQuery);\r\n          } else {\r\n            this.title = 'All Music';\r\n            await this.fetchAllMusic();\r\n          }\r\n        }\r\n      }\r\n    },\r\n    methods: {\r\n      async fetchAllMusic() {\r\n        this.loading = true;\r\n        try {\r\n          const response = await axios.get('http://localhost:3000/musics');\r\n          this.musicList = response.data;\r\n        } catch (error) {\r\n          console.error('Error fetching music:', error);\r\n          this.error = 'Failed to load music. Please try again later.';\r\n        } finally {\r\n          this.loading = false;\r\n        }\r\n      },\r\n      async searchMusic(query) {\r\n        this.loading = true;\r\n        try {\r\n          const response = await axios.get(`http://localhost:3000/musics/search/${query}`);\r\n          this.musicList = response.data;\r\n        } catch (error) {\r\n          console.error('Error searching music:', error);\r\n          this.error = 'Failed to search music. Please try again later.';\r\n        } finally {\r\n          this.loading = false;\r\n        }\r\n      },\r\n      playMusic(music) {\r\n        this.selectedMusic = music;\r\n        // Scroll to top where the player is\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n      },\r\n      stopVideo() {\r\n        this.selectedMusic = null;\r\n      },\r\n      formatDuration(seconds) {\r\n        const minutes = Math.floor(seconds / 60);\r\n        const remainingSeconds = seconds % 60;\r\n        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n      },\r\n      async addToFavorites(music) {\r\n        try {\r\n          await axios.post('http://localhost:3000/favorites/add', {\r\n            musicId: music.ms_id\r\n          });\r\n          alert('Added to favorites successfully!');\r\n        } catch (error) {\r\n          console.error('Error adding to favorites:', error);\r\n          alert('Failed to add to favorites. Please try again.');\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .music-card {\r\n    transition: transform 0.2s;\r\n  }\r\n  \r\n  .music-card:hover {\r\n    transform: translateY(-5px);\r\n  }\r\n  \r\n  .btn-group {\r\n    display: flex;\r\n    gap: 0.5rem;\r\n  }\r\n  \r\n  /* Ensure buttons have consistent width */\r\n  .btn-group .btn {\r\n    flex: 1;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}