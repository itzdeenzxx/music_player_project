{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'FavoriteSongs',\n  data() {\n    return {\n      favorites: [],\n      loading: true,\n      error: null,\n      removingId: null\n    };\n  },\n  created() {\n    this.fetchFavorites();\n  },\n  methods: {\n    async fetchFavorites() {\n      try {\n        this.loading = true;\n        this.error = null;\n        const response = await axios.get(`http://localhost:3000/favs/getfavs/${this.getUserId()}`);\n        this.favorites = response.data;\n      } catch (err) {\n        this.error = 'Failed to load favorites. Please try again.';\n        console.error('Error fetching favorites:', err);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async removeFavorite(musicId) {\n      try {\n        this.removingId = musicId;\n        await axios.get(`http://localhost:3000/favs/getfavsdtl/${musicId}`, {\n          params: {\n            userId: this.getUserId()\n          }\n        });\n        // Remove the song from the local list\n        this.favorites = this.favorites.filter(song => song.ms_id !== musicId);\n      } catch (err) {\n        this.error = 'Failed to remove from favorites. Please try again.';\n        console.error('Error removing favorite:', err);\n      } finally {\n        this.removingId = null;\n      }\n    },\n    async getUserId() {\n      try {\n        const res = await axios.get('http://localhost:3000/users/getss');\n        if (res.data && res.data.id) {\n          this.userId = res.data.id;\n          this.memEmail = res.data.email;\n          this.memName = res.data.name;\n          console.log(\"User ID:\", this.userId);\n        } else {\n          console.warn(\"User ID not found in session data:\", res.data);\n          this.error = 'User ID not found in session.';\n        }\n      } catch (err) {\n        console.error('Error fetching session:', err);\n        this.error = 'Failed to load session data.';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","favorites","loading","error","removingId","created","fetchFavorites","methods","response","get","getUserId","err","console","removeFavorite","musicId","params","userId","filter","song","ms_id","res","id","memEmail","email","memName","log","warn"],"sources":["/Users/addeen/Desktop/project/frontend/src/components/FavoriteSongs.vue"],"sourcesContent":["<template>\r\n    <div class=\"favorites-container p-4\">\r\n      <h2 class=\"text-2xl font-bold mb-4\">My Favorite Songs</h2>\r\n      \r\n      <!-- Loading State -->\r\n      <div v-if=\"loading\" class=\"text-center py-4\">\r\n        <p>Loading your favorites...</p>\r\n      </div>\r\n  \r\n      <!-- Error State -->\r\n      <div v-if=\"error\" class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\r\n        {{ error }}\r\n      </div>\r\n  \r\n      <!-- Empty State -->\r\n      <div v-if=\"!loading && favorites.length === 0\" class=\"text-center py-8\">\r\n        <p class=\"text-gray-600\">You haven't added any songs to your favorites yet.</p>\r\n      </div>\r\n  \r\n      <!-- Favorites List -->\r\n      <div v-if=\"!loading && favorites.length > 0\" class=\"grid gap-4\">\r\n        <div \r\n          v-for=\"song in favorites\" \r\n          :key=\"song.ms_id\"\r\n          class=\"bg-white shadow rounded-lg p-4 flex justify-between items-center hover:bg-gray-50\"\r\n        >\r\n          <div>\r\n            <h3 class=\"font-semibold\">{{ song.title }}</h3>\r\n            <p class=\"text-gray-600 text-sm\">{{ song.artist }}</p>\r\n          </div>\r\n          \r\n          <button\r\n            @click=\"removeFavorite(song.ms_id)\"\r\n            class=\"text-red-600 hover:text-red-800 p-2 rounded-full hover:bg-red-100\"\r\n            :disabled=\"removingId === song.ms_id\"\r\n          >\r\n            <span v-if=\"removingId === song.ms_id\">Removing...</span>\r\n            <span v-else>Remove</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: 'FavoriteSongs',\r\n    data() {\r\n      return {\r\n        favorites: [],\r\n        loading: true,\r\n        error: null,\r\n        removingId: null,\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchFavorites();\r\n    },\r\n    methods: {\r\n      async fetchFavorites() {\r\n        try {\r\n          this.loading = true;\r\n          this.error = null;\r\n          const response = await axios.get(`http://localhost:3000/favs/getfavs/${this.getUserId()}`);\r\n          this.favorites = response.data;\r\n        } catch (err) {\r\n          this.error = 'Failed to load favorites. Please try again.';\r\n          console.error('Error fetching favorites:', err);\r\n        } finally {\r\n          this.loading = false;\r\n        }\r\n      },\r\n  \r\n      async removeFavorite(musicId) {\r\n        try {\r\n          this.removingId = musicId;\r\n          await axios.get(`http://localhost:3000/favs/getfavsdtl/${musicId}`, {\r\n            params: {\r\n              userId: this.getUserId()\r\n            }\r\n          });\r\n          // Remove the song from the local list\r\n          this.favorites = this.favorites.filter(song => song.ms_id !== musicId);\r\n        } catch (err) {\r\n          this.error = 'Failed to remove from favorites. Please try again.';\r\n          console.error('Error removing favorite:', err);\r\n        } finally {\r\n          this.removingId = null;\r\n        }\r\n      },\r\n  \r\n      async getUserId() {\r\n        try {\r\n        const res = await axios.get('http://localhost:3000/users/getss');\r\n        if (res.data && res.data.id) {\r\n            this.userId = res.data.id;\r\n            this.memEmail = res.data.email;\r\n            this.memName = res.data.name;\r\n            console.log(\"User ID:\", this.userId);\r\n        } else {\r\n            console.warn(\"User ID not found in session data:\", res.data);\r\n            this.error = 'User ID not found in session.';\r\n        }\r\n    } catch (err) {\r\n        console.error('Error fetching session:', err);\r\n        this.error = 'Failed to load session data.';\r\n    }\r\n      }\r\n    }\r\n  };\r\n  </script>"],"mappings":"AA6CE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,eAAe;EACrBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,IAAI;MACbC,KAAK,EAAE,IAAI;MACXC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,IAAI,CAACJ,OAAM,GAAI,IAAI;QACnB,IAAI,CAACC,KAAI,GAAI,IAAI;QACjB,MAAMK,QAAO,GAAI,MAAMV,KAAK,CAACW,GAAG,CAAC,sCAAsC,IAAI,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC;QAC1F,IAAI,CAACT,SAAQ,GAAIO,QAAQ,CAACR,IAAI;MAChC,EAAE,OAAOW,GAAG,EAAE;QACZ,IAAI,CAACR,KAAI,GAAI,6CAA6C;QAC1DS,OAAO,CAACT,KAAK,CAAC,2BAA2B,EAAEQ,GAAG,CAAC;MACjD,UAAU;QACR,IAAI,CAACT,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED,MAAMW,cAAcA,CAACC,OAAO,EAAE;MAC5B,IAAI;QACF,IAAI,CAACV,UAAS,GAAIU,OAAO;QACzB,MAAMhB,KAAK,CAACW,GAAG,CAAC,yCAAyCK,OAAO,EAAE,EAAE;UAClEC,MAAM,EAAE;YACNC,MAAM,EAAE,IAAI,CAACN,SAAS,CAAC;UACzB;QACF,CAAC,CAAC;QACF;QACA,IAAI,CAACT,SAAQ,GAAI,IAAI,CAACA,SAAS,CAACgB,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,KAAI,KAAML,OAAO,CAAC;MACxE,EAAE,OAAOH,GAAG,EAAE;QACZ,IAAI,CAACR,KAAI,GAAI,oDAAoD;QACjES,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEQ,GAAG,CAAC;MAChD,UAAU;QACR,IAAI,CAACP,UAAS,GAAI,IAAI;MACxB;IACF,CAAC;IAED,MAAMM,SAASA,CAAA,EAAG;MAChB,IAAI;QACJ,MAAMU,GAAE,GAAI,MAAMtB,KAAK,CAACW,GAAG,CAAC,mCAAmC,CAAC;QAChE,IAAIW,GAAG,CAACpB,IAAG,IAAKoB,GAAG,CAACpB,IAAI,CAACqB,EAAE,EAAE;UACzB,IAAI,CAACL,MAAK,GAAII,GAAG,CAACpB,IAAI,CAACqB,EAAE;UACzB,IAAI,CAACC,QAAO,GAAIF,GAAG,CAACpB,IAAI,CAACuB,KAAK;UAC9B,IAAI,CAACC,OAAM,GAAIJ,GAAG,CAACpB,IAAI,CAACD,IAAI;UAC5Ba,OAAO,CAACa,GAAG,CAAC,UAAU,EAAE,IAAI,CAACT,MAAM,CAAC;QACxC,OAAO;UACHJ,OAAO,CAACc,IAAI,CAAC,oCAAoC,EAAEN,GAAG,CAACpB,IAAI,CAAC;UAC5D,IAAI,CAACG,KAAI,GAAI,+BAA+B;QAChD;MACJ,EAAE,OAAOQ,GAAG,EAAE;QACVC,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEQ,GAAG,CAAC;QAC7C,IAAI,CAACR,KAAI,GAAI,8BAA8B;MAC/C;IACE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}